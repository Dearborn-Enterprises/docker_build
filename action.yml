name: Build Docker Images
description: Buuid docker images from ecr
inputs:
  registry-alias:
    default: ${{ github.repository_owner }}
    required: false
    description: repository alias
  repository:
    default: ${{ github.event.repository.name }}
    required: false
    description: repository name
  aws-region:
    default: "us-east-1"
    required: false
    description: aws region
  role-duration-seconds:
    default: "900"
    required: false
    description: aws role duration
  role-arn:
    default: ""
    required: false
    description: aws role arn to access ecr
  role-session-name:
    default: ""
    required: false
    description: aws role name to access resources
  role-skip-session-tagging:
    default: "false"
    required: false
    description: skip role session tagging
  build-tag:
    default: ${{ github.ref_name == 'main' && 'latest' || github.ref_name }}
    required: false
    description: tag for docker image
  build-path:
    default: .
    required: false
    description: relative path do docker file
  build-extra-parameters:
    default: ""
    required: false
    description: additional parameters for docker build
  docker-registry:
    default: ""
    required: false
    description: "default docker registry. if `docker-registry: ECR` - registry will be get from ECR "
outputs:
  image-name:
    description: vuilt image
    value: ${{ steps.docker-build.outputs.image_name }}

runs:
  using: composite

  steps:
    - name: prepare credentials
      shell: bash
      env:
        DOCKER_CONFIG: /home/runner/.docker
      run: |
        if [ ! -d $DOCKER_CONFIG ] ; then  mkdir --parents $DOCKER_CONFIG ; fi
        if [ ! -r $DOCKER_CONFIG/config.json -a -r /registry-credentials/.dockerconfigjson ] ; then
          cp /registry-credentials/.dockerconfigjson $DOCKER_CONFIG/config.json
        fi

    - name: Configure AWS Credentials
      if: inputs.docker-registry == 'ECR'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.role-arn }}
        role-session-name: ${{ inputs.role-session-name }}
        aws-region: ${{ inputs.aws-region }}
        role-skip-session-tagging: ${{ inputs.role-skip-session-tagging }}
        role-duration-seconds: ${{ inputs.role-duration-seconds }}

    - name: Login to Amazon ECR
      if: inputs.docker-registry == 'ECR'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true

    - name: set env values
      env:
        DOCKER_REGISTRY: ${{ inputs.docker-registry == 'ECR' && steps.login-ecr.outputs.registry || inputs.docker-registry }}
      shell: bash
      run: |
        if [  -n "${DOCKER_REGISTRY}" ] ; then
          DOCKER_REGISTRY="${DOCKER_REGISTRY%/}/"
        fi
        echo "DOCKER_REGISTRY='${DOCKER_REGISTRY%/}'" >> $GITHUB_ENV

    - name: build docker images
      id: docker-build
      shell: bash
      run: |
        docker build --no-cache \
        --build-arg "DOCKER_REGISTRY=${DOCKER_REGISTRY}" \
        ${{ inputs.build-extra-parameters }} \
        --tag ${{ inputs.registry-alias }}/${{ inputs.repository }}:${{ inputs.build-tag }} \
        ${{ inputs.build-path }}
        echo "image_name=${{ inputs.registry-alias }}/${{ inputs.repository }}:${{ inputs.build-tag }}" >> $GITHUB_OUTPUT

